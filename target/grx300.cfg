reset_config trst_and_srst
#adapter_nsrst_assert_width 100
adapter_nsrst_delay 100
#jtag_ntrst_assert_width 100
jtag_ntrst_delay 100

set CHIPNAME grx300
jtag newtap $CHIPNAME cpu0 -irlen 5  -ircapture 0x1 -irmask 0x1f -expected-id 0x00780713
jtag newtap $CHIPNAME cpu1 -irlen 5  -ircapture 0x1 -irmask 0x1f -expected-id 0x10013713
jtag newtap $CHIPNAME cpu2 -irlen 5  -ircapture 0x1 -irmask 0x1f -expected-id 0x10012713

set TARGETNAME $CHIPNAME.cpu2
target create $TARGETNAME mips_m4k -endian big -chain-position $TARGETNAME

$TARGETNAME configure -work-area-phys 0x1e1a0000 -work-area-size 0x100 -work-area-backup 0

proc grx300_cgu_init_600 {} {
    echo "GRX300: CGU init (600 MHz)"

    # PLL0_CFG
    mww 0xbf103004 0x00b02c49
    # PLL2_CFG
    mww 0xbf103060 0x29300241

    # issue soft-reset
    # mww 0xBF203010 0xF1000420
    # reset halt

    # CLK_FSR
    mww 0xbf103010 0x00020000
    # CGU_SYS
    mww 0xbf10300c 0x00000181
}

proc grx300_cgu_init_720 {} {
    echo "GRX300: CGU init (720 MHz)"

    # PLL0_CFG
    mww 0xbf103004 0x00b02c49
    # PLL2_CFG
    mww 0xbf103060 0x293002c1

    # issue soft-reset
    # mww 0xBF203010 0xF1000420
    # reset halt

    # CLK_FSR
    mww 0xbf103010 0x00040000
    # CGU_SYS
    mww 0xbf10300c 0x00000581
}

proc grx300_mc_init_prepare {} {
    echo "GRX300: MC init prepare"

    # halt MC
    mww 0xBF801000 0x400
    sleep 200
}

proc grx300_mc_init_base {} {
    echo "GRX300: MC base init"

    # MC_CCR01
    mww 0xbf801010 0x00000000
    # MC_CCR09
    mww 0xbf801090 0x020000c8
    # MC_CCR11
    mww 0xbf8010b0 0x01000000
    # MC_CCR13
    mww 0xbf8010d0 0x00020000
    # MC_CCR15
    mww 0xbf8010f0 0x01000000
    # MC_CCR16
    mww 0xbf801100 0x00000000
    # MC_CCR17
    mww 0xbf801110 0x00000000
    # MC_CCR18
    mww 0xbf801120 0x00000000
    # MC_CCR19
    mww 0xbf801130 0x00000202
    # MC_CCR20
    mww 0xbf801140 0x00000000
    # MC_CCR22
    mww 0xbf801160 0x00000004
    # MC_CCR23
    mww 0xbf801170 0x00000000
    # MC_CCR25
    mww 0xbf801190 0x00000000
    # MC_CCR26
    mww 0xbf8011a0 0x06420000
    # MC_CCR27
    mww 0xbf8011b0 0x00000004
    # MC_CCR28
    mww 0xbf8011c0 0x00000000
    # MC_CCR29
    mww 0xbf8011d0 0x00040642
    # MC_CCR30
    mww 0xbf8011e0 0x00000000
    # MC_CCR31
    mww 0xbf8011f0 0x01010000
    # MC_CCR32
    mww 0xbf801200 0x0f0f0a02
    # MC_CCR33
    mww 0xbf801210 0x01010101
    # MC_CCR34
    mww 0xbf801220 0x00000101
    # MC_CCR35
    mww 0xbf801230 0x00010001
    # MC_CCR36
    mww 0xbf801240 0x00010006
    # MC_CCR37
    mww 0xbf801250 0x00000000
    # MC_CCR38
    mww 0xbf801260 0x00000000
    # MC_CCR39
    mww 0xbf801270 0x00000000
    # MC_CCR40
    mww 0xbf801280 0x00000000
    # MC_CCR41
    mww 0xbf801290 0x02000100
    # MC_CCR42
    mww 0xbf8012a0 0x00000000
    # MC_CCR43
    mww 0xbf8012b0 0x01010000
    # MC_CCR44
    mww 0xbf8012c0 0x01020201
    # MC_CCR45
    mww 0xbf8012d0 0x00000200
    # MC_CCR46
    mww 0xbf8012e0 0x00000000
    # MC_CCR47
    mww 0xbf8012f0 0x00000000
    # MC_CCR48
    mww 0xbf801300 0x00000600
    # MC_CCR49
    mww 0xbf801310 0x00079900
    # MC_CCR50
    mww 0xbf801320 0x02000200
    # MC_CCR51
    mww 0xbf801330 0x02000200
    # MC_CCR52
    mww 0xbf801340 0x00000799
    # MC_CCR53
    mww 0xbf801350 0x000025fd
    # MC_CCR55
    mww 0xbf801370 0x00000101
    # MC_PHYR0
    mww 0xbf801400 0x000f0100
    # MC_PHYR1
    mww 0xbf801410 0xf4013827
    # MC_PHYR2
    mww 0xbf801420 0x188002c0
    # MC_PHYR3
    mww 0xbf801430 0xf4013827
    # MC_PHYR4
    mww 0xbf801440 0x188002c0
    # MC_PHYR5
    mww 0xbf801450 0x00000005
    # MC_PHYR7
    mww 0xbf801470 0x00091f10
    # MC_PHYR9
    mww 0xbf801490 0x00091f10

}

proc grx300_mc_init_300 {} {
    echo "GRX300: MC init (300 MHz)"

    grx300_mc_init_base
    
    # MC_CCR02
    mww 0xbf801020 0x020101d1
    # MC_CCR03
    mww 0xbf801030 0x0202040a
    # MC_CCR04
    mww 0xbf801040 0x030e1303
    # MC_CCR05
    mww 0xbf801050 0x03020305
    # MC_CCR06
    mww 0xbf801060 0x03035209
    # MC_CCR08
    mww 0xbf801080 0x00090504
    # MC_CCR10
    mww 0xbf8010a0 0x0500790b
    # MC_CCR12
    mww 0xbf8010c0 0x091c0027
    # MC_CCR14
    mww 0xbf8010e0 0x002a00c8
    # MC_CCR21
    mww 0xbf801150 0x00085200
    # MC_CCR24
    mww 0xbf801180 0x00040852
    # MC_CCR54
    mww 0xbf801360 0x00020405
    # MC_PHYR6
    mww 0xbf801460 0xc0092505
    # MC_PHYR8
    mww 0xbf801480 0xc0092505
}

proc grx300_mc_init_360 {} {
    echo "GRX300: MC init (360 MHz)"

    grx300_mc_init_base

    # MC_CCR02
    mww 0xbf801020 0x0201196f
    # MC_CCR03
    mww 0xbf801030 0x0202050c
    # MC_CCR04
    mww 0xbf801040 0x03111604
    # MC_CCR05
    mww 0xbf801050 0x03020306
    # MC_CCR06
    mww 0xbf801060 0x0303626c
    # MC_CCR08
    mww 0xbf801080 0x000c0606
    # MC_CCR10
    mww 0xbf8010a0 0x06009111
    # MC_CCR12
    mww 0xbf8010c0 0x0af6002b
    # MC_CCR14
    mww 0xbf8010e0 0x002e00c8
    # MC_CCR21
    mww 0xbf801150 0x000a6200
    # MC_CCR24
    mww 0xbf801180 0x00040a62
    # MC_CCR54
    mww 0xbf801360 0x00020506
    # MC_PHYR6
    mww 0xbf801460 0xe0092805
    # MC_PHYR8
    mww 0xbf801480 0xe0092805
}

proc grx300_mc_init_finish {} {
    echo "GRX300: MC init finish"

    # setup DDR gate echo DLL delays
    mww 0xBF400420 0x20
    mww 0xBF400428 0x20

    # start MC
    mww 0xBF801000 0x401

    # wait for DLL lock
    sleep 800
}

proc grx300_gdb_attach {} {
    echo "GRX300: gdb-attach"
}

$TARGETNAME configure -event gdb-attach { grx300_gdb_attach }

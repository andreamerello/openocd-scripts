reset_config trst_and_srst
#adapter_nsrst_assert_width 100
adapter_nsrst_delay 100
#jtag_ntrst_assert_width 100
jtag_ntrst_delay 100

set CHIPNAME grx300
jtag newtap $CHIPNAME cpu0 -irlen 5  -ircapture 0x1 -irmask 0x1f -expected-id 0x00780713
jtag newtap $CHIPNAME cpu1 -irlen 5  -ircapture 0x1 -irmask 0x1f -expected-id 0x10013713
jtag newtap $CHIPNAME cpu2 -irlen 5  -ircapture 0x1 -irmask 0x1f -expected-id 0x10012713

set TARGETNAME $CHIPNAME.cpu2
target create $TARGETNAME mips_m4k -endian big -chain-position $TARGETNAME

$TARGETNAME configure -work-area-phys 0x1e1a0000 -work-area-size 0x100 -work-area-backup 0

proc grx300_cgu_init_600 {} {
    echo "GRX300: CGU init (600 MHz)"

    # PLL0
    mww 0xBF103004 0x00B02C49

    # PPE 432 MHz
    mww 0xBF103010 0x20000

    # CPU/RAM 600/300 MHz
    mww 0xBF10300c 0x181

    sleep 200
}

proc grx300_cgu_init_720 {} {
    echo "GRX300: CGU init (720 MHz)"

    # PLL0
    mww 0xBF103004 0x00B02C49

    # PLL2
    mww 0xBF103060 0x241

    # PPE 400 MHz
    mww 0xBF103010 0x40000

    # CPU/RAM 720/360 MHz
    mww 0xBF10300c 0x581

    sleep 200
}

proc grx300_mc_init_prepare {} {
    echo "GRX300: MC init prepare"

    # halt MC
    mww 0xBF801000 0x0
}

proc grx300_mc_init_300 {} {
    echo "GRX300: MC init (300 MHz)"

    mww 0xBF801010 0x0
    mww 0xBF801020 0x20101d1
    mww 0xBF801030 0x202040a
    mww 0xBF801040 0x30e1303
    mww 0xBF801050 0x3020305
    mww 0xBF801060 0x3035209
    mww 0xBF801070 0x1010000
    mww 0xBF801080 0x90504
    mww 0xBF801090 0x20000c8
    mww 0xBF8010a0 0x500790b
    mww 0xBF8010b0 0x1000000
    mww 0xBF8010c0 0x91c0027
    mww 0xBF8010d0 0x20000
    mww 0xBF8010e0 0x2a00c8
    mww 0xBF8010f0 0x1000000
    mww 0xBF801100 0x0
    mww 0xBF801110 0x0
    mww 0xBF801120 0x0
    mww 0xBF801130 0x202
    mww 0xBF801140 0x0
    mww 0xBF801150 0x85200
    mww 0xBF801160 0x4
    mww 0xBF801170 0x0
    mww 0xBF801180 0x40852
    mww 0xBF801190 0x0
    mww 0xBF8011a0 0x6420000
    mww 0xBF8011b0 0x4
    mww 0xBF8011c0 0x0
    mww 0xBF8011d0 0x40642
    mww 0xBF8011e0 0x0
    mww 0xBF8011f0 0x1010000
    mww 0xBF801200 0x0f0f0a02
    mww 0xBF801210 0x1010101
    mww 0xBF801220 0x101
    mww 0xBF801230 0x10001
    mww 0xBF801240 0x10006
    mww 0xBF801250 0x0
    mww 0xBF801260 0x0
    mww 0xBF801270 0x0
    mww 0xBF801280 0x0
    mww 0xBF801290 0x2000100
    mww 0xBF8012a0 0x0
    mww 0xBF8012b0 0x01010000
    mww 0xBF8012c0 0x1020201
    mww 0xBF8012d0 0x200
    mww 0xBF8012e0 0x0
    mww 0xBF8012f0 0x0
    mww 0xBF801300 0x600
    mww 0xBF801310 0x79900
    mww 0xBF801320 0x2000200
    mww 0xBF801330 0x2000200
    mww 0xBF801340 0x799
    mww 0xBF801350 0x25fd
    mww 0xBF801360 0x20405
    mww 0xBF801370 0x101
    mww 0xBF801400 0xf0100
    mww 0xBF801410 0xf4003827
    mww 0xBF801420 0x188002c0
    mww 0xBF801430 0xf4003827
    mww 0xBF801440 0x188002c0
    mww 0xBF801450 0x5
    mww 0xBF801460 0xc0092405
    mww 0xBF801470 0x92410
    mww 0xBF801480 0xc0092405
    mww 0xBF801490 0x92410
}

proc grx300_mc_init_360 {} {
    echo "GRX300: MC init (360 MHz)"

    mww 0xBF801010 0x0
    mww 0xBF801020 0x201196f
    mww 0xBF801030 0x202050c
    mww 0xBF801040 0x3111604
    mww 0xBF801050 0x3020306
    mww 0xBF801060 0x303626c
    mww 0xBF801070 0x1010000
    mww 0xBF801080 0xc0606
    mww 0xBF801090 0x20000c8
    mww 0xBF8010a0 0x6009111
    mww 0xBF8010b0 0x1000000
    mww 0xBF8010c0 0xaf6002b
    mww 0xBF8010d0 0x20000
    mww 0xBF8010e0 0x2e00c8
    mww 0xBF8010f0 0x1000000
    mww 0xBF801100 0x0
    mww 0xBF801110 0x0
    mww 0xBF801120 0x0
    mww 0xBF801130 0x202
    mww 0xBF801140 0x0
    mww 0xBF801150 0xa6200
    mww 0xBF801160 0x4
    mww 0xBF801170 0x0
    mww 0xBF801180 0x40a62
    mww 0xBF801190 0x0
    mww 0xBF8011a0 0x6420000
    mww 0xBF8011b0 0x4
    mww 0xBF8011c0 0x0
    mww 0xBF8011d0 0x40642
    mww 0xBF8011e0 0x0
    mww 0xBF8011f0 0x1010000
    mww 0xBF801200 0xf0f0a02
    mww 0xBF801210 0x1010101
    mww 0xBF801220 0x101
    mww 0xBF801230 0x10001
    mww 0xBF801240 0x10006
    mww 0xBF801250 0x0
    mww 0xBF801260 0x0
    mww 0xBF801270 0x0
    mww 0xBF801280 0x0
    mww 0xBF801290 0x2000100
    mww 0xBF8012a0 0x0
    mww 0xBF8012b0 0x1010000
    mww 0xBF8012c0 0x1020201
    mww 0xBF8012d0 0x200
    mww 0xBF8012e0 0x0
    mww 0xBF8012f0 0x0
    mww 0xBF801300 0x600
    mww 0xBF801310 0x79900
    mww 0xBF801320 0x2000200
    mww 0xBF801330 0x2000200
    mww 0xBF801340 0x799
    mww 0xBF801350 0x25fd
    mww 0xBF801360 0x20506
    mww 0xBF801370 0x101
    mww 0xBF801400 0xf0100
    mww 0xBF801410 0xf4003827
    mww 0xBF801420 0x188002c0
    mww 0xBF801430 0xf4003827
    mww 0xBF801440 0x188002c0
    mww 0xBF801450 0x5
    mww 0xBF801460 0xe0092405
    mww 0xBF801470 0x92410
    mww 0xBF801480 0xe0092405
    mww 0xBF801490 0x92410
}

proc grx300_mc_init_finish {} {
    echo "GRX300: MC init finish"

    # setup DDR gate echo DLL delays
    mww 0xBF400420 0x24
    mww 0xBF400428 0x24

    # start MC
    mww 0xBF801000 0x401

    # wait for DLL lock
    sleep 500
}

proc grx300_gdb_attach {} {
    echo "GRX300: gdb-attach"
}

$TARGETNAME configure -event gdb-attach { grx300_gdb_attach }
